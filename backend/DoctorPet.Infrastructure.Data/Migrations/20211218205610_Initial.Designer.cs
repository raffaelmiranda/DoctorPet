// <auto-generated />
using System;
using DoctorPet.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoctorPet.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DoctorPetContext))]
    [Migration("20211218205610_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DoctorPet.Domain.Entities.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DataCadastro");

                    b.Property<DateTime>("DataConsulta")
                        .HasColumnType("datetime")
                        .HasColumnName("DataConsulta");

                    b.Property<int>("VeterinarioId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("AgendamentoId");

                    b.HasIndex("AnimalId")
                        .HasDatabaseName("IX_Agendamento_AnimalId");

                    b.HasIndex("VeterinarioId")
                        .HasDatabaseName("IX_Agendamento_VeterinarioId");

                    b.ToTable("Agendamento");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DataCadastro");

                    b.Property<int>("Idade")
                        .HasColumnType("int")
                        .HasColumnName("Idade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Nome");

                    b.Property<int>("TipoAnimalId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("AnimalId");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("IX_Animal_ClienteId");

                    b.HasIndex("TipoAnimalId")
                        .HasDatabaseName("IX_Animal_TipoAnimalId");

                    b.ToTable("Animal");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Atendimento", b =>
                {
                    b.Property<int>("VeterinarioId")
                        .HasColumnType("int");

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtendimento")
                        .HasColumnType("datetime")
                        .HasColumnName("DataAtendimento");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Diagnostico");

                    b.HasKey("VeterinarioId", "AnimalId");

                    b.HasIndex("AnimalId")
                        .HasDatabaseName("IX_Atendimento_AnimalId");

                    b.HasIndex("VeterinarioId")
                        .HasDatabaseName("IX_Atendimento_VeterinarioId");

                    b.ToTable("Atendimento");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Nome");

                    b.HasKey("Id")
                        .HasName("ClienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.TipoAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Nome");

                    b.HasKey("Id")
                        .HasName("TipoAnimalId");

                    b.ToTable("TipoAnimal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataCadastro = new DateTime(2021, 12, 18, 17, 56, 10, 192, DateTimeKind.Local).AddTicks(7719),
                            Nome = "Cães"
                        },
                        new
                        {
                            Id = 2,
                            DataCadastro = new DateTime(2021, 12, 18, 17, 56, 10, 194, DateTimeKind.Local).AddTicks(6452),
                            Nome = "Gatos"
                        },
                        new
                        {
                            Id = 3,
                            DataCadastro = new DateTime(2021, 12, 18, 17, 56, 10, 194, DateTimeKind.Local).AddTicks(6569),
                            Nome = "Hamsters"
                        });
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Veterinario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DataCadastro");

                    b.Property<DateTime>("DataContratacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DataContratacao");

                    b.Property<bool>("Geriatria")
                        .HasColumnType("bit")
                        .HasColumnName("Geriatria");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Nome");

                    b.HasKey("Id")
                        .HasName("VeterinarioId");

                    b.ToTable("Veterinario");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Agendamento", b =>
                {
                    b.HasOne("DoctorPet.Domain.Entities.Animal", "Animal")
                        .WithMany("Agendamentos")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorPet.Domain.Entities.Veterinario", "Veterinario")
                        .WithMany("Agendamentos")
                        .HasForeignKey("VeterinarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Veterinario");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Animal", b =>
                {
                    b.HasOne("DoctorPet.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Animais")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorPet.Domain.Entities.TipoAnimal", "TipoAnimal")
                        .WithOne("Animal")
                        .HasForeignKey("DoctorPet.Domain.Entities.Animal", "TipoAnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("TipoAnimal");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Atendimento", b =>
                {
                    b.HasOne("DoctorPet.Domain.Entities.Animal", "Animal")
                        .WithMany("Atendimentos")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorPet.Domain.Entities.Veterinario", "Veterinario")
                        .WithMany("Atendimentos")
                        .HasForeignKey("VeterinarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Veterinario");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Animal", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("Atendimentos");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Animais");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.TipoAnimal", b =>
                {
                    b.Navigation("Animal");
                });

            modelBuilder.Entity("DoctorPet.Domain.Entities.Veterinario", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("Atendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
